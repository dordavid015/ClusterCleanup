apiVersion: argoproj.io/v1alpha1
kind: CronWorkflow
metadata:
  name: cleanup-scale-failed-objects-to-zero
  namespace: default
spec:
  schedule: 0 0 * * 0 # Runs midnight every Sunday
  workflowSpec:
    entrypoint: cleanup-crashloopbackoff-pods
    templates:
      - name: cleanup-crashloopbackoff-pods
        outputs:
          parameters:
            - name: cleanup-crashloopbackoff-pods
              valueFrom:
                path: /tmp/result.txt
        script:
          image: bitnami/kubectl:latest
          command:
            - sh
          source: |
            #!/bin/sh
            cd /tmp
            touch result.txt
            echo "Checking CrashLoopBackOff pods older than a week..."
            count=0
            current_date=$(date +%s)
            
            for namespace in $(kubectl get namespaces -o jsonpath='{.items[*].metadata.name}'); do
              for pod in $(kubectl get pods -n $namespace -o json | jq -r '.items[] | select(.status.containerStatuses[0].state.waiting.reason == "CrashLoopBackOff" or .status.containerStatuses[0].state.waiting.reason == "ImagePullBackOff") | .metadata.name'); do
                creation_timestamp=$(kubectl get pod $pod -n $namespace -o jsonpath='{.metadata.creationTimestamp}')
                creation_date=$(date -d "$creation_timestamp" +%s)
                age_days=$(( (current_date - creation_date) / 86400 ))
                
                if [ "$age_days" -gt 7 ]; then
                  echo "Pod $pod in namespace $namespace is in CrashLoopBackOff/ImagePullBackOff for more than a week ($age_days days)."
                  # Identify the owner of the pod
                  owner_kind=$(kubectl get pod $pod -n $namespace -o jsonpath='{.metadata.ownerReferences[0].kind}')
                  owner_name=$(kubectl get pod $pod -n $namespace -o jsonpath='{.metadata.ownerReferences[0].name}')
                  if [ "$owner_kind" = "ReplicaSet" ]; then
                    # Scale the deployment owning the ReplicaSet to 0
                    deployment_name=$(kubectl get replicaset $owner_name -n $namespace -o jsonpath='{.metadata.ownerReferences[0].name}')
                    if [ -n "$deployment_name" ]; then
                      echo "Scaling deployment $deployment_name to 0 replicas in namespace $namespace."
                      kubectl scale deployment $deployment_name -n $namespace --replicas=0
                      count=$((count + 1))
                    fi
                  elif [ "$owner_kind" = "StatefulSet" ] || [ "$owner_kind" = "DaemonSet" ]; then
                    echo "Scaling $owner_kind $owner_name to 0 replicas in namespace $namespace."
                    kubectl scale $owner_kind $owner_name -n $namespace --replicas=0
                    count=$((count + 1))
                  fi
                else
                  echo "Pod $pod in namespace $namespace has been in CrashLoopBackOff/ImagePullBackOff for $age_days days, skipping."
                fi
              done
            done
            echo "Scaled down $count owners of CrashLoopBackOff/ImagePullBackOff pods older than a week." > /tmp/result.txt
